name: Build, Push & Deploy to OpenShift

on:
  push:
    branches:
      - dev
      - main
      - 'feature/auto-deployment'  
jobs:
  deploy:
    runs-on: [self-hosted]  

    env:
      REGISTRY: ghcr.io

    steps:
      - name: Clean workspace
        run: |
          echo "Cleaning workspace..."
          rm -rf * .??* || true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine branch (push)
        id: br
        run: |
          # Works for push events
          BRANCH="${GITHUB_REF_NAME:-${GITHUB_REF#refs/heads/}}"
          echo "Branch: $BRANCH"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Extract version from version.txt
        id: version
        run: |
          BRANCH="${{ steps.br.outputs.branch }}"
          MAIN_VERSION=$(grep "^version_main:" version.txt | awk '{print $2}')
          DEV_VERSION=$(grep "^version_dev:" version.txt | awk '{print $2}')

          if [ "$BRANCH" = "main" ]; then
            VERSION="$MAIN_VERSION"
          elif [ "$BRANCH" = "dev" ] || [ "$BRANCH" = "feature/auto-deployment" ]; then
            VERSION="$DEV_VERSION"
          else
            echo "No version tagging needed for branch: $BRANCH"
            echo "skip_deploy=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Using version: $VERSION"
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=${{ env.REGISTRY }}/ibm-oss-support/slack-bot:$VERSION" >> "$GITHUB_ENV"

      - name: Stop if skipping deploy
        if: steps.version.outputs.skip_deploy == 'true'
        run: echo "Skipping deploy for this branch."

      - name: Write CA cert to file
        if: steps.version.outputs.skip_deploy != 'true'
        run: printf '%s' "${{ secrets.OCP_CA_CERT }}" > /tmp/ca.crt

      - name: Log in to OpenShift (token)
        if: steps.version.outputs.skip_deploy != 'true'
        run: |
          oc login \
            --server="${{ secrets.OCP_SERVER }}" \
            --token="${{ secrets.OCP_TOKEN }}" \
            --certificate-authority=/tmp/ca.crt

      - name: Login to registries (Podman)
        if: steps.version.outputs.skip_deploy != 'true'
        run: |
          # GHCR
          echo "${{ secrets.GHCR_PAT }}" | podman login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
          # Optional: Docker Hub
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "${{ secrets.DOCKER_PASSWORD }}" | podman login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          fi

      - name: Select namespace & deploy dir
        if: steps.version.outputs.skip_deploy != 'true'
        id: cfg
        run: |
          BRANCH="${{ steps.br.outputs.branch }}"
          if [ "$BRANCH" = "dev" ]; then
            echo "namespace=dev" >> "$GITHUB_OUTPUT"
            echo "deploy_dir=deploy-dev" >> "$GITHUB_OUTPUT"
          elif [ "$BRANCH" = "main" ]; then
            echo "namespace=llm" >> "$GITHUB_OUTPUT"
            echo "deploy_dir=deploy-prod" >> "$GITHUB_OUTPUT"
          elif [ "$BRANCH" = "feature/auto-deployment" ]; then
            echo "namespace=test" >> "$GITHUB_OUTPUT"         # <- your test namespace
            echo "deploy_dir=deploy-dev" >> "$GITHUB_OUTPUT"  # reuse dev manifests (or change to deploy-test)
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi

      - name: Build image (Podman rootless)
        if: steps.version.outputs.skip_deploy != 'true'
        run: |
          export BUILDAH_ISOLATION=chroot
          podman build --pull=always -t "$IMAGE_NAME" . > /tmp/build.log 2>&1 || {
            echo "Build failed:"
            cat /tmp/build.log
            exit 1
          }

      - name: Push image
        if: steps.version.outputs.skip_deploy != 'true'
        run: |
          podman push "$IMAGE_NAME" >> /tmp/push.log 2>&1 || {
            echo "Push failed"
            cat /tmp/push.log
            exit 1
          }

      - name: Replace version in manifests
        if: steps.version.outputs.skip_deploy != 'true'
        run: |
          cd "${{ steps.cfg.outputs.deploy_dir }}"
          echo "Replacing __VERSION__ with '${{ steps.version.outputs.tag }}'..."
          if sed --version >/dev/null 2>&1; then
            find . -type f -name '*.yaml' -exec sed -i "s|__VERSION__|${{ steps.version.outputs.tag }}|g" {} +
          else
            find . -type f -name '*.yaml' -exec sed -i '' "s|__VERSION__|${{ steps.version.outputs.tag }}|g" {} +
          fi

      - name: Switch to namespace
        if: steps.version.outputs.skip_deploy != 'true'
        run: oc project "${{ steps.cfg.outputs.namespace }}"

      - name: Validate manifests (dry-run)
        if: steps.version.outputs.skip_deploy != 'true'
        run: |
          cd "${{ steps.cfg.outputs.deploy_dir }}"
          for file in *.yaml; do
            echo "Validating $file"
            oc apply --dry-run=client -f "$file" >> /tmp/deploy.log 2>&1 || {
              echo "Validation failed: $file"
              cat /tmp/deploy.log
              exit 1
            }
          done

      - name: Apply manifests
        if: steps.version.outputs.skip_deploy != 'true'
        run: |
          echo "Applying manifests from ${{ steps.cfg.outputs.deploy_dir }}"
          oc apply -f "${{ steps.cfg.outputs.deploy_dir }}" >> /tmp/deploy.log 2>&1 || {
            echo "Apply failed"
            cat /tmp/deploy.log
            exit 1
          }

      - name: Restart and wait for rollout
        if: steps.version.outputs.skip_deploy != 'true'
        run: |
          echo "Restarting deployment: slack-bot"
          oc rollout restart deployment/slack-bot -n "${{ steps.cfg.outputs.namespace }}"
          echo "Waiting for rollout to complete..."
          oc rollout status deployment/slack-bot -n "${{ steps.cfg.outputs.namespace }}" >> /tmp/rollout.log 2>&1 || {
            echo "Rollout failed: slack-bot"
            cat /tmp/rollout.log
            exit 1
          }

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-deploy-logs
          path: |
            /tmp/build.log
            /tmp/push.log
            /tmp/deploy.log
            /tmp/rollout.log
